install.packages(gbm)
install.packages('gbm')
n
install.packages('gbm')
install.packages(gbm)
install.packages('gbm')
require(randomForest)
require(gbm)
q()
require(inline)
install.packages("inline")
require(inline)
source('~/Dropbox/write_libsvm.r')
install.packages("Rcpp")
require(Rcpp)
require(inline)
source('~/Dropbox/write_libsvm.r')
setwd("home/chase/dropbox")
install.packages('XML')
install.packages('stringr')
install.packages('r-cran-stringr')
install.packages(file='r-cran-stringr_0.6.0.orig.tar.gz')
sudo gedit /etc/apt/sources.list
sudo gedit /etc/apt/sources.list
sudo gedit
sudo
q()
install.packages("~/Downloads/r-cran-stringr_0.6.0.orig.tar.gz", repos = NULL)
require(gbm)
install.packages("gbm")
remove.packages(gbm)
remove.packages("gbm")
install.packages("gbm")
require(gbm)
remove.packages("gbm")
tour <- read.csv("/home/chase/LKH-2.0.7/tour2.tsp")
head(tour)
?read.csv
tour <- read.csv("/home/chase/LKH-2.0.7/tour2.tsp",header=F,skip=6)
head(tour)
tail(tour)
which(tour$V1==2)
tour$V1[53416:53418]
candidates1 <- read.csv("/home/chase/LKH-2.0.7/candidates_pr150000_10.tsp",header=F,skip=1,stringsAsFactors=F)
candidates2 <- read.csv("/home/chase/LKH-2.0.7/disjoint_candidates.tsp",header=F,skip=1,stringsAsFactors=F)
head(candidates1)
head(candidates2)
names(candidates1)
names(candidates)2
names(candidates2)
candidates1 <- read.csv("/home/chase/LKH-2.0.7/candidates_pr150000_10.tsp",header=F,skip=1,stringsAsFactors=F)
candidates2 <- read.csv("/home/chase/LKH-2.0.7/disjoint_candidates.tsp",header=F,skip=1,stringsAsFactors=F)
candidates <- NULL
for(i in 1:150000)
{
list1 <- strsplit(candidates$V1[i],split=" ")
list1 <- as.numeric(list1[[1]])
list2 <- strsplit(candidates2$V1[i],split=" ")
list2 <- as.numeric(list2[[1]])
list2[2] <- list1[2]
list2 <- paste( as.character(list2), collapse=' ' )
candidates <- c(candidates,list2)
}
candidates <- NULL
for(i in 1:15)
{
list1 <- strsplit(candidates1$V1[i],split=" ")
list1 <- as.numeric(list1[[1]])
list2 <- strsplit(candidates2$V1[i],split=" ")
list2 <- as.numeric(list2[[1]])
list2[2] <- list1[2]
list2 <- paste( as.character(list2), collapse=' ' )
candidates <- c(candidates,list2)
}
candidates
head(candidates1)
head(candidates2)
candidates <- NULL
for(i in 1:150000)
{
list1 <- strsplit(candidates1$V1[i],split=" ")
list1 <- as.numeric(list1[[1]])
list2 <- strsplit(candidates2$V1[i],split=" ")
list2 <- as.numeric(list2[[1]])
list2[2] <- list1[2]
list2 <- paste( as.character(list2), collapse=' ' )
candidates <- c(candidates,list2)
}
write.table(new_candidates,file="/home/chase/LKH-2.0.7/disjoint_candidates2.tsp",quote=F,row.names=F)
write.table(candidates,file="/home/chase/LKH-2.0.7/disjoint_candidates2.tsp",quote=F,row.names=F)
head(candidates)
chase = candidates)
chase = candidates
chase$v1[80]
chase$V1[80]
head(chase)
chase[80]
tour1 <- read.csv(file="z:/Chase/TravelingSanta/data/tour1.tsp",header=F,skip=6,stringsAsFactors=F)
names(tour1) <- c("tour")
tour1 <- data.frame(tour=tour1$tour[1:150000],stringsAsFactors=F)
candidates <- read.csv("z:/Chase/TravelingSanta/data/candidates_pr150000_10.tsp",header=F,skip=1,stringsAsFactors=F)
new_candidates <- NULL
tour1 <- read.csv(file="/home/chase/Dropbox/TravelingSanta/tour1.tsp",header=F,skip=6,stringsAsFactors=F)
names(tour1) <- c("tour")
tour1 <- data.frame(tour=tour1$tour[1:150000],stringsAsFactors=F)
candidates <- read.csv("/home/chase/Dropbox/TravelingSanta/candidates_pr150000_10.tsp",header=F,skip=1,stringsAsFactors=F)
new_candidates <- NULL
class(tour1$tour)
prev_node <- matrix(-1,150000,1)
for(i in 1:150000)
{
idx <- which(tour1$tour==i)
if( length(idx) != 1 )
{
print("ERROR in prev_node loop")
break
}
if(idx==1) next
prev_node[i] <- tour1$tour[idx-1]
}
# build a list of next nodes
next_node <- matrix(-1,150000,1)
for(i in 1:150000)
{
idx <- which(tour1$tour==i)
if( length(idx) != 1 )
{
print("ERROR in next_node loop")
print(i)
break
}
if(idx==150000) next
next_node[i] <- tour1$tour[idx+1]
}
prev_node <- as.numeric(prev_node)
next_node <- as.numeric(next_node)
prev_node[80]
next_node[80]
candidates[80]
candidates[80,]
candidates1[80]
candidates1[80,]
candidates2[80,]
i=80
cand_list <- strsplit(candidates$V1[i],split=" ")
cand_list <- as.numeric(cand_list[[1]])
# change dad node to 0
cand_list[2] <- 0
cand_list
nodes <- cand_list[ seq( 4,(length(cand_list)),2 ) ]
nodes
idx <- which(nodes == next_node[i])
idx
idx <- idx * 2 + 2
cand_list <- cand_list[-(idx:(idx+1))]
cand_list[3] <- cand_list[3] - 1
cand_list
idx <- which(nodes == prev_node[i])
idx
noes
nodes
nodes <- cand_list[ seq( 4,(length(cand_list)),2 ) ]
idx <- which(nodes == prev_node[i])
nodes
idx
idx <- idx * 2 + 2
cand_list <- cand_list[-(idx:(idx+1))]
cand_list[3] <- cand_list[3] - 1
cand_list
new_candidates <- NULL
for(i in 1:150000)
{
# select row from cand_list and convert to numeric
cand_list <- strsplit(candidates$V1[i],split=" ")
cand_list <- as.numeric(cand_list[[1]])
# change dad node to 0
cand_list[2] <- 0
# temporary node list
nodes <- cand_list[ seq( 4,(length(cand_list)),2 ) ]
# remove next node from list (can ignore last node)
idx <- which(nodes == next_node[i])
if( length(idx) > 1 )
{
print("Error with next node")
print(i)
print(idx)
break
}
if( length(idx) == 1 )
{
idx <- idx * 2 + 2
cand_list <- cand_list[-(idx:(idx+1))]
cand_list[3] <- cand_list[3] - 1
}
# remove previous node from list
nodes <- cand_list[ seq( 4,(length(cand_list)),2 ) ]
idx <- which(nodes == prev_node[i])
if( length(idx) > 1 )
{
print("Error with prev node")
print(i)
print(idx)
break
}
if( length(idx) == 1 )
{
idx <- idx * 2 + 2
cand_list <- cand_list[-(idx:(idx+1))]
cand_list[3] <- cand_list[3] - 1
}
# decrement number of candidates
cand_list <- paste( as.character(cand_list), collapse=' ' )
new_candidates <- c(new_candidates,cand_list)
}
head(new_candidates)
new_candidates[80]
write.table(new_candidates,file="/home/chase/LKH-2.0.7/disjoint_candidates.tsp",quote=F,row.names=F)
new_candidates[10933]
new_candidates[10932]
new_candidates[80]
new_candidates[10930]
write.table( format(new_candidates,format=f),file="/home/chase/LKH-2.0.7/disjoint_candidates.tsp",quote=F,row.names=F)
new_candidates[10865]
new_candidates[10932]
new_candidates[10930]
write.table( format(new_candidates,scientific=FALSE),file="/home/chase/LKH-2.0.7/disjoint_candidates.tsp",quote=F,row.names=F)
new_candidates[10930]
new_candidates <- format(new_candidates,scientific=FALSE)
new_candidates[10930]
cand_list
new_candidates <- NULL
t <- proc.time()
# build a list of previous nodes with -1 meaning there isnt a previous node
prev_node <- matrix(-1,150000,1)
for(i in 1:150000)
{
idx <- which(tour1$tour==i)
if( length(idx) != 1 )
{
print("ERROR in prev_node loop")
break
}
if(idx==1) next
prev_node[i] <- tour1$tour[idx-1]
}
# build a list of next nodes
next_node <- matrix(-1,150000,1)
for(i in 1:150000)
{
idx <- which(tour1$tour==i)
if( length(idx) != 1 )
{
print("ERROR in next_node loop")
print(i)
break
}
if(idx==150000) next
next_node[i] <- tour1$tour[idx+1]
}
prev_node <- as.numeric(prev_node)
next_node <- as.numeric(next_node)
### BEGIN loop
for(i in 1:150000)
{
# select row from cand_list and convert to numeric
cand_list <- strsplit(candidates$V1[i],split=" ")
cand_list <- as.numeric(cand_list[[1]])
# change dad node to 0
cand_list[2] <- 0
# temporary node list
nodes <- cand_list[ seq( 4,(length(cand_list)),2 ) ]
# remove next node from list (can ignore last node)
idx <- which(nodes == next_node[i])
if( length(idx) > 1 )
{
print("Error with next node")
print(i)
print(idx)
break
}
if( length(idx) == 1 )
{
idx <- idx * 2 + 2
cand_list <- cand_list[-(idx:(idx+1))]
cand_list[3] <- cand_list[3] - 1
}
# remove previous node from list
nodes <- cand_list[ seq( 4,(length(cand_list)),2 ) ]
idx <- which(nodes == prev_node[i])
if( length(idx) > 1 )
{
print("Error with prev node")
print(i)
print(idx)
break
}
if( length(idx) == 1 )
{
idx <- idx * 2 + 2
cand_list <- cand_list[-(idx:(idx+1))]
cand_list[3] <- cand_list[3] - 1
}
# convert list to character and add to list
cand_list <- format(cand_list, scientific=FALSE)
cand_list <- paste( as.character(cand_list), collapse=' ' )
new_candidates <- c(new_candidates,cand_list)
}
### END loop
proc.time()-t
new_candidates[10930]
write.table(new_candidates,file="/home/chase/LKH-2.0.7/disjoint_candidates.tsp",quote=F,row.names=F)
ROOT = "/home/chase/Dropbox/streetview-classifier"
setwd(ROOT)
taxsale = read.csv('2016_tax_sale_list_cleaned.csv',header=TRUE,stringsAsFactor=FALSE,sep=";")
taxsale = read.csv('data/2016_tax_sale_list_cleaned.csv',header=TRUE,stringsAsFactor=FALSE,sep=",")
head(taxsale)
table(taxsale$street_view_score)
table(taxsale$street_view_rating)
dim(taxsale)
tail(taxsale)
?read.csv
chase = NA
chase
is.na(chase)
wes = "NA"
is.na(wes)
is.na(6)
taxsale = subset(taxsale, subset = c('street_view_rating','address','parcel_number'))
taxsale = subset(taxsale,c('street_view_rating','address','parcel_number'))
taxsale = subset(taxsale,select=c('street_view_rating','address','parcel_number'))
head(taxsale)
data = read.csv('data/2016_tax_sale_list_cleaned.csv',header=TRUE,stringsAsFactor=FALSE,sep=",")
data = subset(data,select=c('street_view_rating','address','parcel_number'))
head(Data)
head(data)
data$street_view_rating[data$street_view_rating > 2] == 1
data$street_view_rating[data$street_view_rating > 2] = 1
head(data)
tail(data)
table(data$street_view_rating)
data$street_view_rating[data$street_view_rating < 2] = 0
table(data$street_view_rating)
data = read.csv('data/2016_tax_sale_list_cleaned.csv',header=TRUE,stringsAsFactor=FALSE,sep=",")
data = subset(data,select=c('street_view_rating','address','parcel_number'))
# re-label street_view_ratings to 0/1
data$street_view_rating[data$street_view_rating < 2] = 0
data$street_view_rating[data$street_view_rating > 2] = 1
table(data$street_view_rating)
a=1
a==1
data$street_view_rating[is.na(data$street_view_rating) == TRUE] = 2
table(data$street_view_rating)
len(table(data$street_view_rating))
length(table(data$street_view_rating))
chase = data$parcel_number[1]
chase
gsub("[^0-9]",chase)
?gsub
grep("[^0-9]",chase)
chase
grep("[^0-9]","",chase)
chase
grep("[0-9]","",chase)
str_replace_all(chase, "[[:punct:]]","")
require(stringr)
str_replace_all(chase, "[[:punct:]]","")
data$parcel_number = str_replace_all(data$parcel_number,"[[:punct:]]","")
head(datA)
head(data)
tail(data)
write.table(data,file='2016_steetview_input.csv',row.names=F,col.names=T,sep=",")
write.table(data,file='data/2016_steetview_input.csv',row.names=F,col.names=T,sep=",")
